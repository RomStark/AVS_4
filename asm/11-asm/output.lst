     1                                  extern printf
     2                                  extern fprintf
     3                                  extern fwrite
     4                                  
     5                                  extern func
     6                                  
     7                                  extern DIRECT_ENCRYPTION
     8                                  extern CYCLE_ENCRYPTION
     9                                  extern NUMBER_ENCRYPTION
    10                                  
    11                                  section .data
    12 00000000 636861726163746572-         format1 db "character encryption: text = %s | encrypted text = %s | symbols = ['%c' -> '%c'] | func result = %lf", 10, 0
    12 00000009 20656E637279707469-
    12 00000012 6F6E3A207465787420-
    12 0000001B 3D202573207C20656E-
    12 00000024 637279707465642074-
    12 0000002D 657874203D20257320-
    12 00000036 7C2073796D626F6C73-
    12 0000003F 203D205B2725632720-
    12 00000048 2D3E20272563275D20-
    12 00000051 7C2066756E63207265-
    12 0000005A 73756C74203D20256C-
    12 00000063 660A00             
    13 00000066 6379636C6520656E63-         format2 db "cycle encryption: text = %s | encrypted text = %s | n = %d | func result = %lf", 10, 0
    13 0000006F 72797074696F6E3A20-
    13 00000078 74657874203D202573-
    13 00000081 207C20656E63727970-
    13 0000008A 746564207465787420-
    13 00000093 3D202573207C206E20-
    13 0000009C 3D202564207C206675-
    13 000000A5 6E6320726573756C74-
    13 000000AE 203D20256C660A00   
    14 000000B6 6E756D62657220656E-         format3 db "number encryption: text = %s | encrypted text = %s | symbols = ['%c' -> '%c'] | func result = %lf", 10, 0
    14 000000BF 6372797074696F6E3A-
    14 000000C8 2074657874203D2025-
    14 000000D1 73207C20656E637279-
    14 000000DA 707465642074657874-
    14 000000E3 203D202573207C2073-
    14 000000EC 796D626F6C73203D20-
    14 000000F5 5B27256327202D3E20-
    14 000000FE 272563275D207C2066-
    14 00000107 756E6320726573756C-
    14 00000110 74203D20256C660A00 
    15                                  
    16                                  
    17                                  ;----------------------------------------------
    18                                  ; Вывод прямого(алфавитного) шифрования в файл
    19                                  ; Encryption *OutDirectEncryption(FILE *fout, Encryption *block)
    20                                  ; {
    21                                  ;     fprintf(fout, "character encryption: text = %s | encrypted text = %s | symbols = [\'%c\' -> \'%c\'] | func result = %lf\n",
    22                                  ;             block->text, block->encrypted_text, block->encryption_alphabet[0], block->encryption_alphabet[1], func(block->text));
    23                                  ;     return block;
    24                                  ; }
    25                                  ;----------------------------------------------
    26                                  global OutDirectEncryption
    27                                  OutDirectEncryption:
    28                                  section .text
    29 00000000 55                          push rbp
    30 00000001 4889E5                      mov rbp, rsp
    31 00000004 4883EC10                    sub rsp, 16
    32 00000008 48897DF8                    mov qword[rbp-8], rdi
    33 0000000C 488975F0                    mov qword[rbp-16], rsi
    34 00000010 488B45F0                    mov rax, qword[rbp-16]
    35 00000014 4883C00C                    add rax, 12
    36 00000018 4889C7                      mov rdi, rax
    37 0000001B E8(00000000)                call func
    38 00000020 66480F7EC0                  movq rax, xmm0
    39 00000025 488B55F0                    mov rdx, qword[rbp-16]
    40 00000029 0FB65209                    movzx edx, byte[rdx+9]
    41 0000002D 440FBEC2                    movsx r8d, dl
    42 00000031 488B55F0                    mov rdx, qword[rbp-16]
    43 00000035 0FB65208                    movzx edx, byte[rdx+8]
    44 00000039 0FBEF2                      movsx esi, dl
    45 0000003C 488B55F0                    mov rdx, qword[rbp-16]
    46 00000040 488D4A70                    lea rcx, [rdx+112]
    47 00000044 488B55F0                    mov rdx, qword[rbp-16]
    48 00000048 4883C20C                    add rdx, 12
    49 0000004C 488B7DF8                    mov rdi, qword[rbp-8]
    50 00000050 66480F6EC0                  movq xmm0, rax
    51 00000055 4589C1                      mov r9d, r8d
    52 00000058 4189F0                      mov r8d, esi
    53 0000005B 48BE-                       mov rsi, format1
    53 0000005D [0000000000000000] 
    54 00000065 B801000000                  mov eax, 1
    55 0000006A E8(00000000)                call fprintf
    56 0000006F B801000000                  mov eax, 1
    57 00000074 C9                          leave
    58 00000075 C3                          ret
    59                                  
    60                                  ;----------------------------------------------
    61                                  ; Вывод циклического шифрования в файл
    62                                  ; Encryption *OutCycleEncryption(FILE *fout, Encryption *block)
    63                                  ; {
    64                                  ;     fprintf(fout, "cycle encryption: text = %s | encrypted text = %s | n = %d | func result = %lf\n",
    65                                  ;             block->text, block->encrypted_text, block->shift, func(block->text));
    66                                  ;     return block;
    67                                  ; }
    68                                  ;----------------------------------------------
    69                                  global OutCycleEncryption
    70                                  OutCycleEncryption:
    71                                  section .text
    72 00000076 55                          push rbp
    73 00000077 4889E5                      mov rbp, rsp
    74 0000007A 4883EC10                    sub rsp, 16
    75 0000007E 48897DF8                    mov qword[rbp-8], rdi
    76 00000082 488975F0                    mov qword[rbp-16], rsi
    77 00000086 488B45F0                    mov rax, qword[rbp-16]
    78 0000008A 4883C00C                    add rax, 12
    79 0000008E 4889C7                      mov rdi, rax
    80 00000091 E8(00000000)                call func
    81 00000096 66480F7EC0                  movq rax, xmm0
    82 0000009B 488B55F0                    mov rdx, qword[rbp-16]
    83 0000009F 8B7204                      mov esi, dword[rdx+4]
    84 000000A2 488B55F0                    mov rdx, qword[rbp-16]
    85 000000A6 488D4A70                    lea rcx, [rdx+112]
    86 000000AA 488B55F0                    mov rdx, qword[rbp-16]
    87 000000AE 4883C20C                    add rdx, 12
    88 000000B2 488B7DF8                    mov rdi, qword[rbp-8]
    89 000000B6 66480F6EC0                  movq xmm0, rax
    90 000000BB 4189F0                      mov r8d, esi
    91 000000BE 48BE-                       mov rsi, format2
    91 000000C0 [6600000000000000] 
    92 000000C8 B801000000                  mov eax, 1
    93 000000CD E8(00000000)                call fprintf
    94 000000D2 B801000000                  mov eax, 1
    95 000000D7 C9                          leave
    96 000000D8 C3                          ret
    97                                  
    98                                  ;----------------------------------------------
    99                                  ; Вывод численного шифрования в файл
   100                                  ; Encryption *OutNumberEncryption(FILE *fout, Encryption *block)
   101                                  ; {
   102                                  ;     fprintf(fout, "number encryption: text = %s | encrypted text = %s | symbols = [\'%c\' -> \'%c\'] | func result = %lf\n",
   103                                  ;             block->text, block->encrypted_text, block->number_alphabet[0], block->number_alphabet[1], func(block->text));
   104                                  ;     return block;
   105                                  ; }
   106                                  ;----------------------------------------------
   107                                  global OutNumberEncryption
   108                                  OutNumberEncryption:
   109                                  section .text
   110 000000D9 55                          push rbp
   111 000000DA 4889E5                      mov rbp, rsp
   112 000000DD 4883EC10                    sub rsp, 16
   113 000000E1 48897DF8                    mov qword[rbp-8], rdi
   114 000000E5 488975F0                    mov qword[rbp-16], rsi
   115 000000E9 488B45F0                    mov rax, qword[rbp-16]
   116 000000ED 4883C00C                    add rax, 12
   117 000000F1 4889C7                      mov rdi, rax
   118 000000F4 E8(00000000)                call func
   119 000000F9 66480F7EC0                  movq rax, xmm0
   120 000000FE 488B55F0                    mov rdx, qword[rbp-16]
   121 00000102 0FB6520B                    movzx edx, byte[rdx+11]
   122 00000106 440FBEC2                    movsx r8d, dl
   123 0000010A 488B55F0                    mov rdx, qword[rbp-16]
   124 0000010E 0FB6520A                    movzx edx, byte[rdx+10]
   125 00000112 0FBEF2                      movsx esi, dl
   126 00000115 488B55F0                    mov rdx, qword[rbp-16]
   127 00000119 488D4A70                    lea rcx, [rdx+112]
   128 0000011D 488B55F0                    mov rdx, qword[rbp-16]
   129 00000121 4883C20C                    add rdx, 12
   130 00000125 488B7DF8                    mov rdi, qword[rbp-8]
   131 00000129 66480F6EC0                  movq xmm0, rax
   132 0000012E 4589C1                      mov r9d, r8d
   133 00000131 4189F0                      mov r8d, esi
   134 00000134 48BE-                       mov rsi, format3
   134 00000136 [B600000000000000] 
   135 0000013E B801000000                  mov eax, 1
   136 00000143 E8(00000000)                call fprintf
   137 00000148 B801000000                  mov eax, 1
   138 0000014D C9                          leave
   139 0000014E C3                          ret
   140                                  
   141                                  ;----------------------------------------------
   142                                  ; // Вывод шифрования в файл
   143                                  ; Encryption *OutEncryption(FILE *fout, Encryption *block)
   144                                  ; {
   145                                  ;     switch (block->encryption_type)
   146                                  ;     {
   147                                  ;     case 1:
   148                                  ;         OutDirectEncryption(fout, block);
   149                                  ;         break;
   150                                  ;     case 2:
   151                                  ;         OutCycleEncryption(fout, block);
   152                                  ;         break;
   153                                  ;     case 3:
   154                                  ;         OutNumberEncryption(fout, block);
   155                                  ;         break;
   156                                  ;     }
   157                                  ;     return block;
   158                                  ; }
   159                                  ;----------------------------------------------
   160                                  global OutEncryption
   161                                  OutEncryption:
   162                                  section .text
   163 0000014F 55                          push rbp
   164 00000150 4889E5                      mov rbp, rsp
   165 00000153 4883EC10                    sub rsp, 16
   166 00000157 48897DF8                    mov qword[rbp-8], rdi
   167 0000015B 488975F0                    mov qword[rbp-16], rsi
   168 0000015F 488B45F0                    mov rax, qword[rbp-16]
   169 00000163 8B00                        mov eax, dword[rax]
   170 00000165 8B1425[00000000]            mov edx, dword[NUMBER_ENCRYPTION]
   171 0000016C 39D0                        cmp eax, edx
   172 0000016E 744D                        je .switch3
   173 00000170 8B1425[00000000]            mov edx, dword[NUMBER_ENCRYPTION]
   174 00000177 39D0                        cmp eax, edx
   175 00000179 7F55                        jg .return
   176 0000017B 8B1425[00000000]            mov edx, dword[DIRECT_ENCRYPTION]
   177 00000182 39D0                        cmp eax, edx
   178 00000184 740D                        je .switch1
   179 00000186 8B1425[00000000]            mov edx, dword[CYCLE_ENCRYPTION]
   180 0000018D 39D0                        cmp eax, edx
   181 0000018F 7417                        je .switch2
   182 00000191 EB3D                        jmp .return
   183                                  .switch1:
   184 00000193 488B55F0                    mov rdx, qword[rbp-16]
   185 00000197 488B45F8                    mov rax, qword[rbp-8]
   186 0000019B 4889D6                      mov rsi, rdx
   187 0000019E 4889C7                      mov rdi, rax
   188 000001A1 E8(19010000)                call OutDirectEncryption
   189 000001A6 EB28                        jmp .return
   190                                  .switch2:
   191 000001A8 488B55F0                    mov rdx, qword[rbp-16]
   192 000001AC 488B45F8                    mov rax, qword[rbp-8]
   193 000001B0 4889D6                      mov rsi, rdx
   194 000001B3 4889C7                      mov rdi, rax
   195 000001B6 E8BBFEFFFF                  call OutCycleEncryption
   196 000001BB EB13                        jmp .return
   197                                  .switch3:
   198 000001BD 488B55F0                    mov rdx, qword[rbp-16]
   199 000001C1 488B45F8                    mov rax, qword[rbp-8]
   200 000001C5 4889D6                      mov rsi, rdx
   201 000001C8 4889C7                      mov rdi, rax
   202 000001CB E809FFFFFF                  call OutNumberEncryption
   203                                  .return:
   204 000001D0 B801000000                  mov eax, 1
   205 000001D5 C9                          leave
   206 000001D6 C3                          ret
   207                                  
   208                                  ;----------------------------------------------
   209                                  ; // Вывод содержимого контейнера в файл
   210                                  ; Container *OutContainer(FILE *fout, Container *cont)
   211                                  ; {
   212                                  ;     fprintf(fout, "Container:\n");
   213                                  ;     for (int i = 0; i < cont->size; ++i)
   214                                  ;     {
   215                                  ;         OutEncryption(fout, &cont->encryptions[i]);
   216                                  ;     }
   217                                  ;     return cont;
   218                                  ; }
   219                                  global OutContainer
   220                                  OutContainer:
   221                                  section .text
   222 000001D7 55                          push rbp
   223 000001D8 4889E5                      mov rbp, rsp
   224 000001DB 4883EC20                    sub rsp, 32
   225 000001DF 48897DE8                    mov qword[rbp-24], rdi
   226 000001E3 488975E0                    mov qword[rbp-32], rsi
   227 000001E7 C745FC00000000              mov dword[rbp-4], 0
   228 000001EE EB2A                        jmp .for_cond
   229                                  .for_loop:
   230 000001F0 8B45FC                      mov eax, dword[rbp-4]
   231 000001F3 4898                        cdqe
   232 000001F5 4869D0D4000000              imul rdx, rax, 212
   233 000001FC 488B45E0                    mov rax, qword[rbp-32]
   234 00000200 4801D0                      add rax, rdx
   235 00000203 488D5004                    lea rdx, [rax+4]
   236 00000207 488B45E8                    mov rax, qword[rbp-24]
   237 0000020B 4889D6                      mov rsi, rdx
   238 0000020E 4889C7                      mov rdi, rax
   239 00000211 E839FFFFFF                  call OutEncryption
   240 00000216 8345FC01                    add dword[rbp-4], 1
   241                                  .for_cond:
   242 0000021A 488B45E0                    mov rax, qword[rbp-32]
   243 0000021E 8B00                        mov eax, dword[rax]
   244 00000220 3945FC                      cmp dword[rbp-4], eax
   245 00000223 7CCB                        jl .for_loop
   246 00000225 B801000000                  mov eax, 1
   247 0000022A C9                          leave
   248 0000022B C3                          ret
