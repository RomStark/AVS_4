     1                                  ;------------------------------------------------------------------------------
     2                                  ; main.asm - содержит главную функцию,
     3                                  ; обеспечивающую простое тестирование
     4                                  ;------------------------------------------------------------------------------
     5                                  ; main.asm
     6                                  
     7                                  global  DIRECT_ENCRYPTION
     8                                  global  CYCLE_ENCRYPTION
     9                                  global  NUMBER_ENCRYPTION
    10                                  
    11                                  %include "macros.mac"
    12                              <1> ; macros.mac - файл с макроопределениями
    13                              <1> 
    14                              <1> extern  fopen
    15                              <1> extern  fscanf
    16                              <1> extern  fclose
    17                              <1> extern  fprintf
    18                              <1> extern  printf
    19                              <1> extern  stdout
    20                              <1> extern  time
    21                              <1> extern  srand
    22                              <1> extern  strcmp
    23                              <1> extern  atoi
    24                              <1> extern  clock
    25                              <1> extern  CLOCKS_PER_SEC
    26                              <1> 
    27                              <1> extern  InContainer
    28                              <1> extern  InRndContainer
    29                              <1> extern  OutContainer
    30                              <1> extern  SortContainer
    31                              <1> 
    32                              <1> ;-------------------------------------------------------------
    33                              <1> ; Вывод строки символов из буфера
    34                              <1> %macro	PrintStrBuf 2
    35                              <1>         mov rdi, %2
    36                              <1>         mov rsi, %1
    37                              <1>         xor rax, rax
    38                              <1>         call fprintf
    39                              <1> %endmacro
    40                              <1> 
    41                              <1> ;-------------------------------------------------------------
    42                              <1> ; Вывод строки, передаваемой непосредственно макросу
    43                              <1> %macro  PrintStr    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  %1,0        ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         mov rax, 0              ; no floating point
    50                              <1>         call fprintf
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;-------------------------------------------------------------
    54                              <1> ; Вывод строки, передаваемой непосредственно макросу
    55                              <1> ; с переводом на следующую строку
    56                              <1> %macro  PrintStrLn    2
    57                              <1>     section .data
    58                              <1>         %%arg1  db  %1,10,0     ; first argument
    59                              <1>     section .text               ; the printf arguments
    60                              <1>         mov rdi, %2
    61                              <1>         mov rsi, %%arg1
    62                              <1>         mov rax, 0              ; no floating point
    63                              <1>         call fprintf
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------
    67                              <1> ; Вывод целого числа
    68                              <1> %macro  PrintInt    2
    69                              <1>     section .data
    70                              <1>         %%arg1  db  "%d",0     ; first argument
    71                              <1>     section .text               ; the printf arguments
    72                              <1>         mov rdi, %2
    73                              <1>         mov rsi, %%arg1
    74                              <1>         mov rdx, %1
    75                              <1>         mov rax, 0              ; no floating point
    76                              <1>         call fprintf
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> ;-------------------------------------------------------------
    80                              <1> ; Вывод 64-разрядного беззнакового целого числа
    81                              <1> %macro  PrintLLUns    2
    82                              <1>     section .data
    83                              <1>         %%arg1  db  "%llu",0     ; first argument
    84                              <1>     section .text               ; the printf arguments
    85                              <1>         mov rdi, %2
    86                              <1>         mov rsi, %%arg1
    87                              <1>         mov rdx, %1
    88                              <1>         mov rax, 0              ; no floating point
    89                              <1>         call fprintf
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------
    93                              <1> ; Вывод действительного числа двойной точности
    94                              <1> %macro  PrintDouble    2
    95                              <1>     section .data
    96                              <1>         %%arg1  db  "%g",0     ; first argument
    97                              <1>     section .text               ; the printf arguments
    98                              <1>         mov rdi, %2
    99                              <1>         mov rsi, %%arg1
   100                              <1>         movsd xmm0, %1
   101                              <1>         mov rax, 1              ; no floating point
   102                              <1>         call fprintf
   103                              <1> %endmacro
   104                              <1> 
   105                              <1> ;-------------------------------------------------------------
   106                              <1> ; Вывод содержимого контейнера
   107                              <1> %macro  PrintContainer    2
   108                              <1>     mov     rsi, %1
   109                              <1>     mov     rdi, %2
   110                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   111                              <1>     call    OutContainer
   112                              <1> %endmacro
   113                              <1> 
   114                              <1> ;-------------------------------------------------------------
   115                              <1> ; Сортировка содержимого контейнера
   116                              <1> %macro  ShellSortContainer    1
   117                              <1>     mov     rdi, %1
   118                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   119                              <1>     call    SortContainer
   120                              <1> %endmacro
   121                              <1> 
   122                              <1> ;-------------------------------------------------------------
   123                              <1> ; Открытие файла для чтения, записи
   124                              <1> %macro  FileOpen   3
   125                              <1>     section .data
   126                              <1>         %%rw  db  %2,0          ; признак доступа
   127                              <1>     section .text               ; the printf arguments
   128                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   129                              <1>         lea     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   130                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   131                              <1>         call    fopen
   132                              <1>         mov     [%3], rax
   133                              <1> %endmacro
   134                              <1> 
   135                              <1> ;-------------------------------------------------------------
   136                              <1> ; Закрытие открытого файла
   137                              <1> %macro  FileClose   1
   138                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   139                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   140                              <1>     call    fclose
   141                              <1> %endmacro
   142                              <1> 
    12                                  
    13                                  section .data
    14 00000000 01000000                    DIRECT_ENCRYPTION   dd  1
    15 00000004 02000000                    CYCLE_ENCRYPTION    dd  2
    16 00000008 03000000                    NUMBER_ENCRYPTION   dd  3
    17 0000000C 000000000000F03F            oneDouble   dq  1.0
    18 00000014 496E636F7272656374-         erMsg1  db "Incorrect number of arguments = %d: ",10,0
    18 0000001D 206E756D626572206F-
    18 00000026 6620617267756D656E-
    18 0000002F 7473203D2025643A20-
    18 00000038 0A00               
    19 0000003A 2D6E00                      rndGen  db "-n",0
    20 0000003D 2D6600                      fileGen  db "-f",0
    21 00000040 696E636F7272656374-         errMessage1 db  "incorrect command line!", 10,"  Waited:",10
    21 00000049 20636F6D6D616E6420-
    21 00000052 6C696E65210A202057-
    21 0000005B 61697465643A0A     
    22 00000062 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    22 0000006B 616E64202D6620696E-
    22 00000074 66696C65206F757466-
    22 0000007D 696C653031206F7574-
    22 00000086 66696C6530320A2020-
    22 0000008F 4F723A0A           
    23 00000093 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    23 0000009C 616E64202D6E206E75-
    23 000000A5 6D626572206F757466-
    23 000000AE 696C653031206F7574-
    23 000000B7 66696C6530320A00   
    24 000000BF 696E636F7272656374-         errMessage2 db  "incorrect qualifier value!", 10,"  Waited:",10
    24 000000C8 207175616C69666965-
    24 000000D1 722076616C7565210A-
    24 000000DA 20205761697465643A-
    24 000000E3 0A                 
    25 000000E4 2020202020636F6D6D-                     db  "     command -f infile outfile01 outfile02",10,"  Or:",10
    25 000000ED 616E64202D6620696E-
    25 000000F6 66696C65206F757466-
    25 000000FF 696C653031206F7574-
    25 00000108 66696C6530320A2020-
    25 00000111 4F723A0A           
    26 00000115 2020202020636F6D6D-                     db  "     command -n number outfile01 outfile02",10,0
    26 0000011E 616E64202D6E206E75-
    26 00000127 6D626572206F757466-
    26 00000130 696C653031206F7574-
    26 00000139 66696C6530320A00   
    27                                  
    28                                  section .bss
    29 00000000 ????????                    argc        resd    1
    30 00000004 ????????                    num         resd    1
    31 00000008 ????????????????            sum         resq    1
    32 00000010 ????????????????            start       resq    1       ; начало отсчета времени
    33 00000018 ????????????????            delta       resq    1       ; интервал отсчета времени
    34 00000020 <res 10h>                   startTime   resq    2       ; начало отсчета времени
    35 00000030 <res 10h>                   endTime     resq    2       ; конец отсчета времени
    36 00000040 <res 10h>                   deltaTime   resq    2       ; интервал отсчета времени
    37 00000050 ????????????????            ifst        resq    1       ; указатель на файл, открываемый файл для чтения шифрований
    38 00000058 ????????????????            ofst1       resq    1       ; указатель на файл, открываемый файл для записи контейнера
    39 00000060 ????????????????            ofst2       resq    1       ; указатель на файл, открываемый файл для записи периметра
    40 00000068 <res 205944h>               cont        resb    2120004 ; Массив используемый для хранения данных
    41                                  
    42                                  section .text
    43                                  global main
    44                                  main:
    45 00000000 55                      push rbp
    46 00000001 4889E5                  mov rbp,rsp
    47                                  
    48 00000004 893C25[00000000]            mov dword [argc], edi ;rdi contains number of arguments
    49 0000000B 4989FC                      mov r12, rdi ;rdi contains number of arguments
    50 0000000E 4989F5                      mov r13, rsi ;rsi contains the address to the array of arguments
    51                                  
    52                                  .printArguments:
    53                                      PrintStrLn "The command and arguments:", [stdout]
    57                              <1>  section .data
    58 00000141 54686520636F6D6D61- <1>  %%arg1 db %1,10,0
    58 0000014A 6E6420616E64206172- <1>
    58 00000153 67756D656E74733A0A- <1>
    58 0000015C 00                  <1>
    59                              <1>  section .text
    60 00000011 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000019 48BE-               <1>  mov rsi, %%arg1
    61 0000001B [4101000000000000]  <1>
    62 00000023 B800000000          <1>  mov rax, 0
    63 00000028 E8(00000000)        <1>  call fprintf
    54 0000002D BB00000000                  mov rbx, 0
    55                                  .printLoop:
    56                                      PrintStrBuf qword [r13+rbx*8], [stdout]
    35 00000032 488B3C25[00000000]  <1>  mov rdi, %2
    36 0000003A 498B74DD00          <1>  mov rsi, %1
    37 0000003F 4831C0              <1>  xor rax, rax
    38 00000042 E8(00000000)        <1>  call fprintf
    57                                      PrintStr    10, [stdout]
    44                              <1>  section .data
    45 0000015D 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000047 488B3C25[00000000]  <1>  mov rdi, %2
    48 0000004F 48BE-               <1>  mov rsi, %%arg1
    48 00000051 [5D01000000000000]  <1>
    49 00000059 B800000000          <1>  mov rax, 0
    50 0000005E E8(00000000)        <1>  call fprintf
    58 00000063 48FFC3                      inc rbx
    59 00000066 4C39E3                      cmp rbx, r12
    60 00000069 7CC7                        jl .printLoop
    61                                  
    62 0000006B 4983FC05                    cmp r12, 5      ; проверка количества аргументов
    63 0000006F 741F                        je .next1
    64                                      PrintStrBuf errMessage1, [stdout]
    35 00000071 488B3C25[00000000]  <1>  mov rdi, %2
    36 00000079 48BE-               <1>  mov rsi, %1
    36 0000007B [4000000000000000]  <1>
    37 00000083 4831C0              <1>  xor rax, rax
    38 00000086 E8(00000000)        <1>  call fprintf
    65 0000008B E92C050000                  jmp .return
    66                                  .next1:
    67                                      PrintStrLn "Start", [stdout]
    57                              <1>  section .data
    58 0000015F 53746172740A00      <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000090 488B3C25[00000000]  <1>  mov rdi, %2
    61 00000098 48BE-               <1>  mov rsi, %%arg1
    61 0000009A [5F01000000000000]  <1>
    62 000000A2 B800000000          <1>  mov rax, 0
    63 000000A7 E8(00000000)        <1>  call fprintf
    68                                      ; Проверка второго аргумента
    69 000000AC 48BF-                       mov rdi, rndGen
    69 000000AE [3A00000000000000] 
    70 000000B6 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    71 000000BA E8(00000000)                call strcmp
    72 000000BF 4883F800                    cmp rax, 0          ; строки равны "-n"
    73 000000C3 743C                        je .next2
    74 000000C5 48BF-                       mov rdi, fileGen
    74 000000C7 [3D00000000000000] 
    75 000000CF 498B7508                    mov rsi, [r13+8]    ; второй аргумент командной строки
    76 000000D3 E8(00000000)                call strcmp
    77 000000D8 4883F800                    cmp rax, 0          ; строки равны "-f"
    78 000000DC 0F84B9000000                je .next3
    79                                      PrintStrBuf errMessage2, [stdout]
    35 000000E2 488B3C25[00000000]  <1>  mov rdi, %2
    36 000000EA 48BE-               <1>  mov rsi, %1
    36 000000EC [BF00000000000000]  <1>
    37 000000F4 4831C0              <1>  xor rax, rax
    38 000000F7 E8(00000000)        <1>  call fprintf
    80 000000FC E9BB040000                  jmp .return
    81                                  .next2:
    82                                      ; Генерация случайных шифрований
    83 00000101 498B7D10                    mov rdi, [r13+16]
    84 00000105 E8(00000000)                call atoi
    85 0000010A 890425[04000000]            mov [num], eax
    86                                      PrintInt [num], [stdout]
    69                              <1>  section .data
    70 00000166 256400              <1>  %%arg1 db "%d",0
    71                              <1>  section .text
    72 00000111 488B3C25[00000000]  <1>  mov rdi, %2
    73 00000119 48BE-               <1>  mov rsi, %%arg1
    73 0000011B [6601000000000000]  <1>
    74 00000123 488B1425[04000000]  <1>  mov rdx, %1
    75 0000012B B800000000          <1>  mov rax, 0
    76 00000130 E8(00000000)        <1>  call fprintf
    87                                      PrintStrLn "", [stdout]
    57                              <1>  section .data
    58 00000169 0A00                <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000135 488B3C25[00000000]  <1>  mov rdi, %2
    61 0000013D 48BE-               <1>  mov rsi, %%arg1
    61 0000013F [6901000000000000]  <1>
    62 00000147 B800000000          <1>  mov rax, 0
    63 0000014C E8(00000000)        <1>  call fprintf
    88 00000151 8B0425[04000000]            mov eax, [num]
    89 00000158 83F801                      cmp eax, 1
    90 0000015B 0F8CFF030000                jl .fall1
    91 00000161 3D10270000                  cmp eax, 10000
    92 00000166 0F8FF4030000                jg .fall1
    93                                      ; Начальная установка генератора случайных чисел
    94 0000016C 4831FF                      xor     rdi, rdi
    95 0000016F 4831C0                      xor     rax, rax
    96 00000172 E8(00000000)                call    time
    97 00000177 4889C7                      mov     rdi, rax
    98 0000017A 4831C0                      xor     rax, rax
    99 0000017D E8(00000000)                call    srand
   100                                      ; Заполнение контейнера случайными шифрованиями
   101 00000182 48BF-                       mov     rdi, cont   ; передача адреса контейнера
   101 00000184 [6800000000000000] 
   102 0000018C 488B3425[04000000]          mov     rsi, [num]  ; передача количества шифрований
   103 00000194 E8(00000000)                call    InRndContainer
   104 00000199 EB4A                        jmp .task2
   105                                  
   106                                  .next3:
   107                                      ; Получение шифрований из файла
   108                                      FileOpen [r13+16], "r", ifst
   125                              <1>  section .data
   126 0000016B 7200                <1>  %%rw db %2,0
   127                              <1>  section .text
   128 0000019B 498B7D10            <1>  mov rdi, %1
   129 0000019F 488D3425[6B010000]  <1>  lea rsi, %%rw
   130 000001A7 B800000000          <1>  mov rax, 0
   131 000001AC E8(00000000)        <1>  call fopen
   132 000001B1 48890425[50000000]  <1>  mov [%3], rax
   109                                      ; Заполнение контейнера шифрованиями из файла
   110 000001B9 48BE-                       mov     rsi, cont           ; адрес контейнера
   110 000001BB [6800000000000000] 
   111 000001C3 488B3C25[50000000]          mov     rdi, [ifst]         ; указатель на файл
   112 000001CB 4831C0                      xor     rax, rax
   113 000001CE E8(00000000)                call    InContainer         ; ввод данных в контейнер
   114                                      FileClose [ifst]
   138 000001D3 488B3C25[50000000]  <1>  mov rdi, %1
   139 000001DB B800000000          <1>  mov rax, 0
   140 000001E0 E8(00000000)        <1>  call fclose
   115                                  
   116                                  .task2:
   117                                      ; Вывод содержимого контейнера
   118                                      PrintStrLn "Filled container:", [stdout]
    57                              <1>  section .data
    58 0000016D 46696C6C656420636F- <1>  %%arg1 db %1,10,0
    58 00000176 6E7461696E65723A0A- <1>
    58 0000017F 00                  <1>
    59                              <1>  section .text
    60 000001E5 488B3C25[00000000]  <1>  mov rdi, %2
    61 000001ED 48BE-               <1>  mov rsi, %%arg1
    61 000001EF [6D01000000000000]  <1>
    62 000001F7 B800000000          <1>  mov rax, 0
    63 000001FC E8(00000000)        <1>  call fprintf
   119                                      PrintContainer cont, [stdout]
   108 00000201 48BE-               <1>  mov rsi, %1
   108 00000203 [6800000000000000]  <1>
   109 0000020B 488B3C25[00000000]  <1>  mov rdi, %2
   110 00000213 B800000000          <1>  mov rax, 0
   111 00000218 E8(00000000)        <1>  call OutContainer
   120                                  
   121                                      FileOpen [r13+24], "w", ofst1
   125                              <1>  section .data
   126 00000180 7700                <1>  %%rw db %2,0
   127                              <1>  section .text
   128 0000021D 498B7D18            <1>  mov rdi, %1
   129 00000221 488D3425[80010000]  <1>  lea rsi, %%rw
   130 00000229 B800000000          <1>  mov rax, 0
   131 0000022E E8(00000000)        <1>  call fopen
   132 00000233 48890425[58000000]  <1>  mov [%3], rax
   122                                      PrintStrLn "Filled container:", [ofst1]
    57                              <1>  section .data
    58 00000182 46696C6C656420636F- <1>  %%arg1 db %1,10,0
    58 0000018B 6E7461696E65723A0A- <1>
    58 00000194 00                  <1>
    59                              <1>  section .text
    60 0000023B 488B3C25[58000000]  <1>  mov rdi, %2
    61 00000243 48BE-               <1>  mov rsi, %%arg1
    61 00000245 [8201000000000000]  <1>
    62 0000024D B800000000          <1>  mov rax, 0
    63 00000252 E8(00000000)        <1>  call fprintf
   123                                      PrintContainer cont, [ofst1]
   108 00000257 48BE-               <1>  mov rsi, %1
   108 00000259 [6800000000000000]  <1>
   109 00000261 488B3C25[58000000]  <1>  mov rdi, %2
   110 00000269 B800000000          <1>  mov rax, 0
   111 0000026E E8(00000000)        <1>  call OutContainer
   124                                      FileClose [ofst1]
   138 00000273 488B3C25[58000000]  <1>  mov rdi, %1
   139 0000027B B800000000          <1>  mov rax, 0
   140 00000280 E8(00000000)        <1>  call fclose
   125                                  
   126                                      ; Вычисление времени старта
   127 00000285 B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   128 0000028A 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   129 0000028C 488D3425[20000000]          lea rsi, [startTime]
   130 00000294 0F05                        syscall        ; [time] contains number of seconds
   131                                                     ; [time + 8] contains number of nanoseconds
   132                                  
   133                                      ShellSortContainer cont
   117 00000296 48BF-               <1>  mov rdi, %1
   117 00000298 [6800000000000000]  <1>
   118 000002A0 B800000000          <1>  mov rax, 0
   119 000002A5 E8(00000000)        <1>  call SortContainer
   134                                  
   135                                      ; Вычисление времени завершения
   136 000002AA B8E4000000                  mov rax, 228   ; 228 is system call for sys_clock_gettime
   137 000002AF 31FF                        xor edi, edi   ; 0 for system clock (preferred over "mov rdi, 0")
   138 000002B1 488D3425[30000000]          lea rsi, [endTime]
   139 000002B9 0F05                        syscall        ; [time] contains number of seconds
   140                                                     ; [time + 8] contains number of nanoseconds
   141                                  
   142                                      ; Вывод содержимого контейнера
   143                                      PrintStrLn "Sorted container:", [stdout]
    57                              <1>  section .data
    58 00000195 536F7274656420636F- <1>  %%arg1 db %1,10,0
    58 0000019E 6E7461696E65723A0A- <1>
    58 000001A7 00                  <1>
    59                              <1>  section .text
    60 000002BB 488B3C25[00000000]  <1>  mov rdi, %2
    61 000002C3 48BE-               <1>  mov rsi, %%arg1
    61 000002C5 [9501000000000000]  <1>
    62 000002CD B800000000          <1>  mov rax, 0
    63 000002D2 E8(00000000)        <1>  call fprintf
   144                                      PrintContainer cont, [stdout]
   108 000002D7 48BE-               <1>  mov rsi, %1
   108 000002D9 [6800000000000000]  <1>
   109 000002E1 488B3C25[00000000]  <1>  mov rdi, %2
   110 000002E9 B800000000          <1>  mov rax, 0
   111 000002EE E8(00000000)        <1>  call OutContainer
   145                                  
   146                                      FileOpen [r13+24], "w", ofst1
   125                              <1>  section .data
   126 000001A8 7700                <1>  %%rw db %2,0
   127                              <1>  section .text
   128 000002F3 498B7D18            <1>  mov rdi, %1
   129 000002F7 488D3425[A8010000]  <1>  lea rsi, %%rw
   130 000002FF B800000000          <1>  mov rax, 0
   131 00000304 E8(00000000)        <1>  call fopen
   132 00000309 48890425[58000000]  <1>  mov [%3], rax
   147                                      PrintStrLn "Sorted container:", [ofst1]
    57                              <1>  section .data
    58 000001AA 536F7274656420636F- <1>  %%arg1 db %1,10,0
    58 000001B3 6E7461696E65723A0A- <1>
    58 000001BC 00                  <1>
    59                              <1>  section .text
    60 00000311 488B3C25[58000000]  <1>  mov rdi, %2
    61 00000319 48BE-               <1>  mov rsi, %%arg1
    61 0000031B [AA01000000000000]  <1>
    62 00000323 B800000000          <1>  mov rax, 0
    63 00000328 E8(00000000)        <1>  call fprintf
   148                                      PrintContainer cont, [ofst1]
   108 0000032D 48BE-               <1>  mov rsi, %1
   108 0000032F [6800000000000000]  <1>
   109 00000337 488B3C25[58000000]  <1>  mov rdi, %2
   110 0000033F B800000000          <1>  mov rax, 0
   111 00000344 E8(00000000)        <1>  call OutContainer
   149                                      FileClose [ofst1]
   138 00000349 488B3C25[58000000]  <1>  mov rdi, %1
   139 00000351 B800000000          <1>  mov rax, 0
   140 00000356 E8(00000000)        <1>  call fclose
   150                                  
   151                                      ; Получение времени работы
   152 0000035B 488B0425[30000000]          mov rax, [endTime]
   153 00000363 482B0425[20000000]          sub rax, [startTime]
   154 0000036B 488B1C25[38000000]          mov rbx, [endTime+8]
   155 00000373 488B0C25[28000000]          mov rcx, [startTime+8]
   156 0000037B 4839CB                      cmp rbx, rcx
   157 0000037E 7D0A                        jge .subNanoOnly
   158                                      ; иначе занимаем секунду
   159 00000380 48FFC8                      dec rax
   160 00000383 4881C300CA9A3B              add rbx, 1000000000
   161                                  .subNanoOnly:
   162 0000038A 482B1C25[28000000]          sub rbx, [startTime+8]
   163 00000392 48890425[40000000]          mov [deltaTime], rax
   164 0000039A 48891C25[48000000]          mov [deltaTime+8], rbx
   165                                  
   166                                      PrintStr ". Calculaton time = ", [stdout]
    44                              <1>  section .data
    45 000001BD 2E2043616C63756C61- <1>  %%arg1 db %1,0
    45 000001C6 746F6E2074696D6520- <1>
    45 000001CF 3D2000              <1>
    46                              <1>  section .text
    47 000003A2 488B3C25[00000000]  <1>  mov rdi, %2
    48 000003AA 48BE-               <1>  mov rsi, %%arg1
    48 000003AC [BD01000000000000]  <1>
    49 000003B4 B800000000          <1>  mov rax, 0
    50 000003B9 E8(00000000)        <1>  call fprintf
   167                                      PrintLLUns [deltaTime], [stdout]
    82                              <1>  section .data
    83 000001D2 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000003BE 488B3C25[00000000]  <1>  mov rdi, %2
    86 000003C6 48BE-               <1>  mov rsi, %%arg1
    86 000003C8 [D201000000000000]  <1>
    87 000003D0 488B1425[40000000]  <1>  mov rdx, %1
    88 000003D8 B800000000          <1>  mov rax, 0
    89 000003DD E8(00000000)        <1>  call fprintf
   168                                      PrintStr " sec, ", [stdout]
    44                              <1>  section .data
    45 000001D7 207365632C2000      <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000003E2 488B3C25[00000000]  <1>  mov rdi, %2
    48 000003EA 48BE-               <1>  mov rsi, %%arg1
    48 000003EC [D701000000000000]  <1>
    49 000003F4 B800000000          <1>  mov rax, 0
    50 000003F9 E8(00000000)        <1>  call fprintf
   169                                      PrintLLUns [deltaTime+8], [stdout]
    82                              <1>  section .data
    83 000001DE 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000003FE 488B3C25[00000000]  <1>  mov rdi, %2
    86 00000406 48BE-               <1>  mov rsi, %%arg1
    86 00000408 [DE01000000000000]  <1>
    87 00000410 488B1425[48000000]  <1>  mov rdx, %1
    88 00000418 B800000000          <1>  mov rax, 0
    89 0000041D E8(00000000)        <1>  call fprintf
   170                                      PrintStr " nsec", [stdout]
    44                              <1>  section .data
    45 000001E3 206E73656300        <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000422 488B3C25[00000000]  <1>  mov rdi, %2
    48 0000042A 48BE-               <1>  mov rsi, %%arg1
    48 0000042C [E301000000000000]  <1>
    49 00000434 B800000000          <1>  mov rax, 0
    50 00000439 E8(00000000)        <1>  call fprintf
   171                                      PrintStr 10, [stdout]
    44                              <1>  section .data
    45 000001E9 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 0000043E 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000446 48BE-               <1>  mov rsi, %%arg1
    48 00000448 [E901000000000000]  <1>
    49 00000450 B800000000          <1>  mov rax, 0
    50 00000455 E8(00000000)        <1>  call fprintf
   172                                  
   173                                      FileOpen [r13+32], "w", ofst2
   125                              <1>  section .data
   126 000001EB 7700                <1>  %%rw db %2,0
   127                              <1>  section .text
   128 0000045A 498B7D20            <1>  mov rdi, %1
   129 0000045E 488D3425[EB010000]  <1>  lea rsi, %%rw
   130 00000466 B800000000          <1>  mov rax, 0
   131 0000046B E8(00000000)        <1>  call fopen
   132 00000470 48890425[60000000]  <1>  mov [%3], rax
   174                                      PrintStr ". Calculaton time = ", [ofst2]
    44                              <1>  section .data
    45 000001ED 2E2043616C63756C61- <1>  %%arg1 db %1,0
    45 000001F6 746F6E2074696D6520- <1>
    45 000001FF 3D2000              <1>
    46                              <1>  section .text
    47 00000478 488B3C25[60000000]  <1>  mov rdi, %2
    48 00000480 48BE-               <1>  mov rsi, %%arg1
    48 00000482 [ED01000000000000]  <1>
    49 0000048A B800000000          <1>  mov rax, 0
    50 0000048F E8(00000000)        <1>  call fprintf
   175                                      PrintLLUns [deltaTime], [ofst2]
    82                              <1>  section .data
    83 00000202 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 00000494 488B3C25[60000000]  <1>  mov rdi, %2
    86 0000049C 48BE-               <1>  mov rsi, %%arg1
    86 0000049E [0202000000000000]  <1>
    87 000004A6 488B1425[40000000]  <1>  mov rdx, %1
    88 000004AE B800000000          <1>  mov rax, 0
    89 000004B3 E8(00000000)        <1>  call fprintf
   176                                      PrintStr " sec, ", [ofst2]
    44                              <1>  section .data
    45 00000207 207365632C2000      <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000004B8 488B3C25[60000000]  <1>  mov rdi, %2
    48 000004C0 48BE-               <1>  mov rsi, %%arg1
    48 000004C2 [0702000000000000]  <1>
    49 000004CA B800000000          <1>  mov rax, 0
    50 000004CF E8(00000000)        <1>  call fprintf
   177                                      PrintLLUns [deltaTime+8], [ofst2]
    82                              <1>  section .data
    83 0000020E 256C6C7500          <1>  %%arg1 db "%llu",0
    84                              <1>  section .text
    85 000004D4 488B3C25[60000000]  <1>  mov rdi, %2
    86 000004DC 48BE-               <1>  mov rsi, %%arg1
    86 000004DE [0E02000000000000]  <1>
    87 000004E6 488B1425[48000000]  <1>  mov rdx, %1
    88 000004EE B800000000          <1>  mov rax, 0
    89 000004F3 E8(00000000)        <1>  call fprintf
   178                                      PrintStr " nsec", [ofst2]
    44                              <1>  section .data
    45 00000213 206E73656300        <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 000004F8 488B3C25[60000000]  <1>  mov rdi, %2
    48 00000500 48BE-               <1>  mov rsi, %%arg1
    48 00000502 [1302000000000000]  <1>
    49 0000050A B800000000          <1>  mov rax, 0
    50 0000050F E8(00000000)        <1>  call fprintf
   179                                      PrintStr 10, [ofst2]
    44                              <1>  section .data
    45 00000219 0A00                <1>  %%arg1 db %1,0
    46                              <1>  section .text
    47 00000514 488B3C25[60000000]  <1>  mov rdi, %2
    48 0000051C 48BE-               <1>  mov rsi, %%arg1
    48 0000051E [1902000000000000]  <1>
    49 00000526 B800000000          <1>  mov rax, 0
    50 0000052B E8(00000000)        <1>  call fprintf
   180                                      FileClose [ofst2]
   138 00000530 488B3C25[60000000]  <1>  mov rdi, %1
   139 00000538 B800000000          <1>  mov rax, 0
   140 0000053D E8(00000000)        <1>  call fclose
   181                                  
   182                                      PrintStrLn "Stop", [stdout]
    57                              <1>  section .data
    58 0000021B 53746F700A00        <1>  %%arg1 db %1,10,0
    59                              <1>  section .text
    60 00000542 488B3C25[00000000]  <1>  mov rdi, %2
    61 0000054A 48BE-               <1>  mov rsi, %%arg1
    61 0000054C [1B02000000000000]  <1>
    62 00000554 B800000000          <1>  mov rax, 0
    63 00000559 E8(00000000)        <1>  call fprintf
   183 0000055E EB5C                        jmp .return
   184                                  .fall1:
   185                                      PrintStr "incorrect number of figures = ", [stdout]
    44                              <1>  section .data
    45 00000221 696E636F7272656374- <1>  %%arg1 db %1,0
    45 0000022A 206E756D626572206F- <1>
    45 00000233 662066696775726573- <1>
    45 0000023C 203D2000            <1>
    46                              <1>  section .text
    47 00000560 488B3C25[00000000]  <1>  mov rdi, %2
    48 00000568 48BE-               <1>  mov rsi, %%arg1
    48 0000056A [2102000000000000]  <1>
    49 00000572 B800000000          <1>  mov rax, 0
    50 00000577 E8(00000000)        <1>  call fprintf
   186                                      PrintInt [num], [stdout]
    69                              <1>  section .data
    70 00000240 256400              <1>  %%arg1 db "%d",0
    71                              <1>  section .text
    72 0000057C 488B3C25[00000000]  <1>  mov rdi, %2
    73 00000584 48BE-               <1>  mov rsi, %%arg1
    73 00000586 [4002000000000000]  <1>
    74 0000058E 488B1425[04000000]  <1>  mov rdx, %1
    75 00000596 B800000000          <1>  mov rax, 0
    76 0000059B E8(00000000)        <1>  call fprintf
   187                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
    57                              <1>  section .data
    58 00000243 2E205365742030203C- <1>  %%arg1 db %1,10,0
    58 0000024C 206E756D626572203C- <1>
    58 00000255 3D2031303030300A00  <1>
    59                              <1>  section .text
    60 000005A0 488B3C25[00000000]  <1>  mov rdi, %2
    61 000005A8 48BE-               <1>  mov rsi, %%arg1
    61 000005AA [4302000000000000]  <1>
    62 000005B2 B800000000          <1>  mov rax, 0
    63 000005B7 E8(00000000)        <1>  call fprintf
   188                                  .return:
   189 000005BC C9                      leave
   190 000005BD C3                      ret
